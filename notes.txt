first init

Don't actually make a program with real passwords!
This is just a fun project.

If the user types in the correct password, we will encrypt the other passwords.
Let's dive in.

1. Ask user for the password.
2. Then ask if they want to add or view passwords in the database.
The options that follow will be in a while True loop.
3. Make a function for each of the view and add paths.
4. This is so that we can have the logic in a function, and not all
nested in a loop.
5. For the add function:
    - ask for name and password
    - open up passwords.txt and put the info in
    ** use "with" because the file will automatically close.

    with open('passwords.txt', 'a') as f:
        f.write(name + "|" + pwd)

    The second argument is the mode in which we interact with the file.
        - 'w' - write. Override a file if it exists, or create a new one. Only use if you want to override.
        - 'r' - read. All you can do is read. Can't alter it.
        - 'a' - append. Adds something to the end of existing file, or create a new one if it doesn't exist.

timestamp: 1:15:29

This full add function creates a new page for everything to insert on.

Make sure to add a \n to the code.

        f.write(name + "|" + pwd + "\n")

6. For the view function:
    - use the 'r' capability with the f.write.
    - use a for loop to get all the lines of the file.

        with open('passwords.txt', 'r') as f:
        for line in f.readlines():
            print(line.rstrip())
    - at the end, you need to have the .rstrip to get rid of the
    new line "\n" that spawns at the end.

7. Now, we should separate the username from the password in the passwords.txt
file, to get specific things.
    - we should change the previous code within the for loop in the view function
    to this:

    for line in f.readlines():
        data = line.rstrip()
        user, passw = data.split("|")

    - for each pair, it can be split up into user, and passw.

8. Add some styling to the print statement, like this:
    print("User:", user, "| Password:", passw)

9. The next step is to encrpyt the passwords file, because we don't
want people opening it up.
- We can import a module.
- Type pip install cryptography
- from cryptography.fernet import Fernet

// timestamp: 1:25:31

It's okay that the import is underlined in yellow.

The master password that we input + the key from the
imported cryptography will help us decrypt the text.

We need a function to create a key, and one to retrieve a key.

10. Make a function to spawn a key. Then comment it out.
Like this:

def write_key():
    key = Fernet.generate_key()
    with open("key.key", "wb") as key_file:
        key_file.write(key)

write_key()

The wb means 'write bits'

Then the key spawns, and we can comment this out with ''' '''

11. Make a function that loads this key. Like this:

def load_key():
    file = open('key.key', 'rb')
    key = file.read()
    file.close()
    return key

We put this function above the master_pwd input.

12. Then below the master_pwd input, we combine the key and password
and store it in Fernet.

master_pwd = input("What is the master password? ")

key = load_key() + master_pwd.encode() 
fer = Fernet(key)

13. Now we need to go to our add function and encrypt the password
so that it doesn't show the real deal inside the file.

Go to the add function and change this line to this:

        f.write(name + "|" + str(fer.encrypt(pwd.encode())) + "\n")

14. We need to decrypt them when we do the view function.

            print("User:", user, "| Password:", str(fer.decrypt(passw.encode())))

15. We should be storing encrypted, and reading decrpyted!
Remember to remove any passwords from passwords.txt.

16. Run the program, and choose a random password.

17. The viewing of the passwords doesn't work because we were writing byte strings.
Those are these:
b'hello'
It's different from this:
'hello'

What we need to do for step 13 and 14 instead is take away the str() stuff and
put a .decode() after everything in step 13. I'll show step 13:

        f.write(name + "|" + fer.encrypt(pwd.encode()).decode() + "\n")

18. This should work, but the view function returns the password as a byte now.
We type .decode() after the view thing like this:

            print("User:", user, "| Password:", fer.decrypt(passw.encode()).decode())

Should work now.

19. This above way doesn't work with master passwords.

20. Here's the code (in passwords2.py) to make everything work.

We imported a few things, initially created a variable named
salt and read it into the file. Just like we did for key.key
in step 10. Then, we did a few things under master password
to make the master_pwd work.

This new code works, but if we log in with a different password,
and we add more passwords to the main list, we will always
get an error when viewing the list no matter what master_pwd we
use because the passwords in that list have different keys.